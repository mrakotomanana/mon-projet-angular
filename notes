<div class="container mt-4">
  <p [ngStyle]="{'backgroundColor': color }">
    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Id impedit, hic odit fugiat iusto quod, voluptatibus
    praesentium corporis assumenda laboriosam consectetur est reiciendis sequi ratione labore laudantium quo minus
    optio.
  </p>
  <div class="alert alert-dark" role="alert">
    A simple dark alertâ€”check it out! <a href="#" class="alert-link">an example link</a>.
  </div>
  <div class="alert alert-success" role="alert">
    <h4 class="alert-heading">Well done!</h4>
    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so
      that you can see how spacing within an alert works with this kind of content.</p>
    <hr>
    <p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
  </div>
  <div class="alert alert-warning alert-dismissible fade show" role="alert">
    <strong>Holy guacamole!</strong> You should check in on some of those fields below.
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
</div>

<div class="container">
  <div class="alert alert-info">
    <input type="number" (input)="initialCount"> Parent : {{ initialCount }}
  </div>
  <app-sekoly></app-sekoly>
</div>

<div class="container">
  <div class="alert alert-info">
    <p>num :: {{ personne | json }}</p>
  </div>
</div>

<div class="container">
  <div class="alert alert-info">
    <ul>
      <li *ngFor="let item of matricule"> {{ item }}</li>
    </ul>
  </div>
</div>

<div class="container">
  <div class="alert alert-info">
    <p [textContent]="title"></p>
  </div>
 
  <div class="alert alert-success">
    <ul>
    <ng-container *ngFor="let item of matricule" >
      <li *ngIf="item % 2 == 0; then si else sinon"></li>
      <ng-template #si>
        <li>
          {{ item }} est pair
        </li>
      </ng-template>
      <ng-template #sinon>
        <li>
          {{ item }} est impair
        </li>
      </ng-template>
      
    </ng-container>
  </ul>

  <ul>
    <ng-container *ngFor="let item of matricule" >
      <ng-container [ngSwitch]="item">
      <li *ngSwitchCase="1">
        {{ item }} one
      </li>
      <li *ngSwitchCase="5">
        {{ item }} five
      </li>
      <li *ngSwitchDefault>
        {{ item }} autre.
      </li>
      </ng-container>
      
    </ng-container>
    
  </ul>
  </div>


 
</div>

<div class="container">
  <app-pere></app-pere>
</div>

<!-- <div class="container mt-4">
    <p class="lead">
      {{ title }}
    </p>
    <p class="lead" [textContent]="title"></p>
    <input type="text" (change)="title = nom.value" #nom>
</div> -->